// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for DatabasesOperations.
    /// </summary>
    public static partial class DatabasesOperationsExtensions
    {
            /// <summary>
            /// Pause an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to pause.
            /// </param>
            public static void PauseDataWarehouse(this IDatabasesOperations operations, string databaseName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).PauseDataWarehouseAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pause an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to pause.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PauseDataWarehouseAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PauseDataWarehouseWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Pause an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to pause.
            /// </param>
            public static void BeginPauseDataWarehouse(this IDatabasesOperations operations, string databaseName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).BeginPauseDataWarehouseAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Pause an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to pause.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginPauseDataWarehouseAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginPauseDataWarehouseWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Resume an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to resume.
            /// </param>
            public static void ResumeDataWarehouse(this IDatabasesOperations operations, string databaseName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).ResumeDataWarehouseAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to resume.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ResumeDataWarehouseAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ResumeDataWarehouseWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Resume an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to resume.
            /// </param>
            public static void BeginResumeDataWarehouse(this IDatabasesOperations operations, string databaseName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).BeginResumeDataWarehouseAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resume an Azure SQL Data Warehouse database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Data Warehouse database to resume.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginResumeDataWarehouseAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginResumeDataWarehouseWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns a list of Azure SQL database restore points.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database from which to retrieve available
            /// restore points.
            /// </param>
            public static System.Collections.Generic.IEnumerable<RestorePoint> ListRestorePoints(this IDatabasesOperations operations, string databaseName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).ListRestorePointsAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of Azure SQL database restore points.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database from which to retrieve available
            /// restore points.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<RestorePoint>> ListRestorePointsAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRestorePointsWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Azure SQL database or updates an existing Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be operated on (Updated or created).
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a database.
            /// </param>
            public static Database CreateOrUpdate(this IDatabasesOperations operations, string databaseName, DatabaseCreateOrUpdateParameters parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).CreateOrUpdateAsync(databaseName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Azure SQL database or updates an existing Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be operated on (Updated or created).
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Database> CreateOrUpdateAsync(this IDatabasesOperations operations, string databaseName, DatabaseCreateOrUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(databaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Azure SQL database or updates an existing Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be operated on (Updated or created).
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a database.
            /// </param>
            public static Database BeginCreateOrUpdate(this IDatabasesOperations operations, string databaseName, DatabaseCreateOrUpdateParameters parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).BeginCreateOrUpdateAsync(databaseName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Azure SQL database or updates an existing Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be operated on (Updated or created).
            /// </param>
            /// <param name='parameters'>
            /// The required parameters for creating or updating a database.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Database> BeginCreateOrUpdateAsync(this IDatabasesOperations operations, string databaseName, DatabaseCreateOrUpdateParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(databaseName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be deleted.
            /// </param>
            public static void Delete(this IDatabasesOperations operations, string databaseName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).DeleteAsync(databaseName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IDatabasesOperations operations, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(databaseName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns information about an Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// The comma separated list of child objects to expand in the response.
            /// </param>
            public static Database Get(this IDatabasesOperations operations, string databaseName, string expand = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).GetAsync(databaseName, expand), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns information about an Azure SQL database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='databaseName'>
            /// The name of the Azure SQL Database to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// The comma separated list of child objects to expand in the response.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Database> GetAsync(this IDatabasesOperations operations, string databaseName, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(databaseName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns information about an Azure SQL Database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static System.Collections.Generic.IEnumerable<Database> List(this IDatabasesOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Database> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Database>))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDatabasesOperations)s).ListAsync(odataQuery), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns information about an Azure SQL Database.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<Database>> ListAsync(this IDatabasesOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<Database> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<Database>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
