// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Represents an Azure SQL Database data masking policy.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataMaskingPolicy : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the DataMaskingPolicy class.
        /// </summary>
        public DataMaskingPolicy() { }

        /// <summary>
        /// Initializes a new instance of the DataMaskingPolicy class.
        /// </summary>
        /// <param name="dataMaskingState">The state of the data masking
        /// policy.</param>
        /// <param name="exemptPrincipals">The list of the exempt
        /// principals</param>
        /// <param name="name">Resource name</param>
        /// <param name="id">Resource Id</param>
        public DataMaskingPolicy(string dataMaskingState, string exemptPrincipals, string name = default(string), string id = default(string))
            : base(name, id)
        {
            DataMaskingState = dataMaskingState;
            ExemptPrincipals = exemptPrincipals;
        }

        /// <summary>
        /// Gets or sets the state of the data masking policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataMaskingState")]
        public string DataMaskingState { get; set; }

        /// <summary>
        /// Gets or sets the list of the exempt principals
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.exemptPrincipals")]
        public string ExemptPrincipals { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataMaskingState == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DataMaskingState");
            }
            if (ExemptPrincipals == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ExemptPrincipals");
            }
        }
    }
}
