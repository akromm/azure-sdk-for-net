// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Represents the properties of an Azure SQL Database data masking rule.
    /// </summary>
    public partial class DataMaskingRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the DataMaskingRuleProperties class.
        /// </summary>
        public DataMaskingRuleProperties() { }

        /// <summary>
        /// Initializes a new instance of the DataMaskingRuleProperties class.
        /// </summary>
        /// <param name="id">The rule Id.</param>
        /// <param name="ruleState">The rule state.</param>
        /// <param name="maskingFunction">The masking function that is used
        /// for the data masking rule.</param>
        /// <param name="schemaName">The schema name on which the data masking
        /// rule is applied.</param>
        /// <param name="tableName">The table name on which the data masking
        /// rule is applied.</param>
        /// <param name="columnName">The column name on which the data masking
        /// rule is applied.</param>
        /// <param name="numberFrom">The numberFrom property of the masking
        /// rule.</param>
        /// <param name="numberTo">The numberTo property of the data masking
        /// rule.</param>
        /// <param name="prefixSize">The prefixSize property that is used for
        /// the data masking rule.</param>
        /// <param name="suffixSize">The suffixSize property that is used for
        /// the data masking rule.</param>
        /// <param name="replacementString">The replacementString property
        /// that is used for the data masking rule.</param>
        public DataMaskingRuleProperties(string id, string ruleState, string maskingFunction, string schemaName = default(string), string tableName = default(string), string columnName = default(string), string numberFrom = default(string), string numberTo = default(string), string prefixSize = default(string), string suffixSize = default(string), string replacementString = default(string))
        {
            Id = id;
            RuleState = ruleState;
            SchemaName = schemaName;
            TableName = tableName;
            ColumnName = columnName;
            MaskingFunction = maskingFunction;
            NumberFrom = numberFrom;
            NumberTo = numberTo;
            PrefixSize = prefixSize;
            SuffixSize = suffixSize;
            ReplacementString = replacementString;
        }

        /// <summary>
        /// Gets or sets the rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the rule state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleState")]
        public string RuleState { get; set; }

        /// <summary>
        /// Gets or sets the schema name on which the data masking rule is
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaName")]
        public string SchemaName { get; set; }

        /// <summary>
        /// Gets or sets the table name on which the data masking rule is
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableName")]
        public string TableName { get; set; }

        /// <summary>
        /// Gets or sets the column name on which the data masking rule is
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "columnName")]
        public string ColumnName { get; set; }

        /// <summary>
        /// Gets or sets the masking function that is used for the data
        /// masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maskingFunction")]
        public string MaskingFunction { get; set; }

        /// <summary>
        /// Gets or sets the numberFrom property of the masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberFrom")]
        public string NumberFrom { get; set; }

        /// <summary>
        /// Gets or sets the numberTo property of the data masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberTo")]
        public string NumberTo { get; set; }

        /// <summary>
        /// Gets or sets the prefixSize property that is used for the data
        /// masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prefixSize")]
        public string PrefixSize { get; set; }

        /// <summary>
        /// Gets or sets the suffixSize property that is used for the data
        /// masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suffixSize")]
        public string SuffixSize { get; set; }

        /// <summary>
        /// Gets or sets the replacementString property that is used for the
        /// data masking rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replacementString")]
        public string ReplacementString { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Id");
            }
            if (RuleState == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleState");
            }
            if (MaskingFunction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MaskingFunction");
            }
        }
    }
}
