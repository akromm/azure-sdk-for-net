// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Represents the activity on an Azure SQL Elastic Pool.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ElasticPoolDatabaseActivity : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ElasticPoolDatabaseActivity
        /// class.
        /// </summary>
        public ElasticPoolDatabaseActivity() { }

        /// <summary>
        /// Initializes a new instance of the ElasticPoolDatabaseActivity
        /// class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="databaseName">Gets the database name.</param>
        /// <param name="endTime">Gets the time the operation finished.</param>
        /// <param name="errorCode">Gets the error code if available.</param>
        /// <param name="errorMessage">Gets the error message if
        /// available.</param>
        /// <param name="errorSeverity">Gets the error severity if
        /// available.</param>
        /// <param name="operation">Gets the operation name.</param>
        /// <param name="operationId">Gets the unique operation ID.</param>
        /// <param name="percentComplete">Gets the percentage complete if
        /// available.</param>
        /// <param name="requestedElasticPoolName">Gets the name for the
        /// Elastic Pool the database is moving into if available.</param>
        /// <param name="currentElasticPoolName">Gets the name of the current
        /// Elastic Pool the database is in if available.</param>
        /// <param name="currentServiceObjective">Gets the name of the current
        /// service objective if available.</param>
        /// <param name="requestedServiceObjective">Gets the name of the
        /// requested service objective if available.</param>
        /// <param name="serverName">Gets the name of the Azure SQL Server the
        /// Elastic Pool is in.</param>
        /// <param name="startTime">Gets the time the operation
        /// started.</param>
        /// <param name="state">Gets the current state of the
        /// operation.</param>
        public ElasticPoolDatabaseActivity(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string databaseName = default(string), System.DateTime? endTime = default(System.DateTime?), int? errorCode = default(int?), string errorMessage = default(string), int? errorSeverity = default(int?), string operation = default(string), string operationId = default(string), int? percentComplete = default(int?), string requestedElasticPoolName = default(string), string currentElasticPoolName = default(string), string currentServiceObjective = default(string), string requestedServiceObjective = default(string), string serverName = default(string), System.DateTime? startTime = default(System.DateTime?), string state = default(string))
            : base(location, id, name, type, tags)
        {
            DatabaseName = databaseName;
            EndTime = endTime;
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
            ErrorSeverity = errorSeverity;
            Operation = operation;
            OperationId = operationId;
            PercentComplete = percentComplete;
            RequestedElasticPoolName = requestedElasticPoolName;
            CurrentElasticPoolName = currentElasticPoolName;
            CurrentServiceObjective = currentServiceObjective;
            RequestedServiceObjective = requestedServiceObjective;
            ServerName = serverName;
            StartTime = startTime;
            State = state;
        }

        /// <summary>
        /// Gets the database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Gets the time the operation finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endTime")]
        public System.DateTime? EndTime { get; private set; }

        /// <summary>
        /// Gets the error code if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.errorCode")]
        public int? ErrorCode { get; private set; }

        /// <summary>
        /// Gets the error message if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.errorMessage")]
        public string ErrorMessage { get; private set; }

        /// <summary>
        /// Gets the error severity if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.errorSeverity")]
        public int? ErrorSeverity { get; private set; }

        /// <summary>
        /// Gets the operation name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.operation")]
        public string Operation { get; private set; }

        /// <summary>
        /// Gets the unique operation ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.operationId")]
        public string OperationId { get; private set; }

        /// <summary>
        /// Gets the percentage complete if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.percentComplete")]
        public int? PercentComplete { get; private set; }

        /// <summary>
        /// Gets the name for the Elastic Pool the database is moving into if
        /// available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestedElasticPoolName")]
        public string RequestedElasticPoolName { get; private set; }

        /// <summary>
        /// Gets the name of the current Elastic Pool the database is in if
        /// available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentElasticPoolName")]
        public string CurrentElasticPoolName { get; private set; }

        /// <summary>
        /// Gets the name of the current service objective if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentServiceObjective")]
        public string CurrentServiceObjective { get; private set; }

        /// <summary>
        /// Gets the name of the requested service objective if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestedServiceObjective")]
        public string RequestedServiceObjective { get; private set; }

        /// <summary>
        /// Gets the name of the Azure SQL Server the Elastic Pool is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverName")]
        public string ServerName { get; private set; }

        /// <summary>
        /// Gets the time the operation started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime { get; private set; }

        /// <summary>
        /// Gets the current state of the operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
