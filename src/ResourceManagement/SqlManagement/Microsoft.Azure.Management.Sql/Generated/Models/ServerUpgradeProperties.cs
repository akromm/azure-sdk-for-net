// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Start Azure SQL Server Upgrade properties.
    /// </summary>
    public partial class ServerUpgradeProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServerUpgradeProperties class.
        /// </summary>
        public ServerUpgradeProperties() { }

        /// <summary>
        /// Initializes a new instance of the ServerUpgradeProperties class.
        /// </summary>
        /// <param name="version">Gets or sets the version for the Azure SQL
        /// Server being upgraded.</param>
        /// <param name="scheduleUpgradeAfterUtcDateTime">Gets or sets the
        /// earliest time to upgrade the Azure SQL Server.</param>
        /// <param name="databaseCollection">Gets or sets the collection of
        /// recommended database properties to upgrade the Azure SQL
        /// Server.</param>
        /// <param name="elasticPoolCollection">Gets or sets the collection of
        /// recommended elastic pool properties to upgrade the Azure SQL
        /// Server.</param>
        public ServerUpgradeProperties(string version, System.DateTime? scheduleUpgradeAfterUtcDateTime = default(System.DateTime?), System.Collections.Generic.IList<RecommendedDatabaseProperties> databaseCollection = default(System.Collections.Generic.IList<RecommendedDatabaseProperties>), System.Collections.Generic.IList<UpgradeRecommendedElasticPoolProperties> elasticPoolCollection = default(System.Collections.Generic.IList<UpgradeRecommendedElasticPoolProperties>))
        {
            Version = version;
            ScheduleUpgradeAfterUtcDateTime = scheduleUpgradeAfterUtcDateTime;
            DatabaseCollection = databaseCollection;
            ElasticPoolCollection = elasticPoolCollection;
        }

        /// <summary>
        /// Gets or sets the version for the Azure SQL Server being upgraded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the earliest time to upgrade the Azure SQL Server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ScheduleUpgradeAfterUtcDateTime")]
        public System.DateTime? ScheduleUpgradeAfterUtcDateTime { get; set; }

        /// <summary>
        /// Gets or sets the collection of recommended database properties to
        /// upgrade the Azure SQL Server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "DatabaseCollection")]
        public System.Collections.Generic.IList<RecommendedDatabaseProperties> DatabaseCollection { get; set; }

        /// <summary>
        /// Gets or sets the collection of recommended elastic pool properties
        /// to upgrade the Azure SQL Server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ElasticPoolCollection")]
        public System.Collections.Generic.IList<UpgradeRecommendedElasticPoolProperties> ElasticPoolCollection { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Version == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Version");
            }
        }
    }
}
